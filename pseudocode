PROGRAM COVID-19PatientManagementSystem
BEGIN
	FUNCTION searchPatient(fileName,patientName)
		OPEN and READ fileName as fileHandler
		FOR EACH line IN fileHandler
			IF (patientName IN line) THEN
				CLOSE fileHandler
				RETURN FALSE
			ENDIF
		ENDFOR
		CLOSE fileHandler
		RETURN TRUE
	ENDFUNCTION
	
	FUNCTION patientRegistration()
		DOWHILE TRUE
			patient=[]
			patientName = READ("Patient Name,(x) to exit: ") in UPPER case as STRING
			IF (patientName='X') THEN
				BREAK
			ENDIF
			IF(searchPatient(Patient_Detail.txt,patientName)) THEN
				OPEN and READ Patient_Detail.txt as getID
				count=0
				FOR EACH line IN getID
					count=count+1
				ENDFOR
				count=count+1
				CLOSE Patient_Detail.txt
				
				age = READ("Age:")
				IF (age is an integer) THEN
					READ age as STRING
				ELSE
					PRINT("Invalid age.")
					BREAK
				ENDIF
					
				PRINT("Select a group:")
				PRINT("ATO=Asymptomatic individuals with history of travelling overseas")
				PRINT("ACC=Asymptomatic individuals with history of contact with known case of COVID-19")
				PRINT("AEO=Asymptomatic individuals who had attended event associated with known COVID-19 outbreak")
				PRINT("SID=Symptomatic individuals")
				PRINT("AHS=Asymptomatic hospital staff")
				group = READ("Group: ") in UPPER case as STRING
				IF (group='ATO' or group='ACC' or group='AEO' or group='SID' or group='AHS') THEN
					PASS
				ELSE
					PRINT("Invalid group.")
					BREAK
				ENDIF
				
				PRINT("Select a zone:")
				PRINT("A-East")
				PRINT("B-West")
				PRINT("C-North")
				PRINT("D-South")
				zone=READ("Zone(A/B/C/D):")in UPPER case as STRING
				IF (zone='A' or zone='B' or zone='C' or zone='D) THEN
					PASS
				ELSE
					PRINT("Invalid zone.")
					BREAK
				ENDIF
				
				contactNumber = READ("Contact Number:")
				IF (contactNumber is an integer) THEN
					contactNumber = '0' + contactNumber
					READ contactNumber as STRING
				ELSE
					PRINT("Invalid contact number.")
					BREAK
				ENDIF
				
				emailAddress = READ("Email Address:") as STRING
				
				patientID = zone + group + count
				READ patientID as STRING

				add patientID into patient
				add patientName into patient
				add age into patient
				add group into patient
				add zone into patient
				add contactNumber into patient
				add emailAddress into patient
				PRINT(patient)
				
				OPEN and APPEND Patient_Detail.txt as fileHandler
				FOR EACH items IN patient
					add items into fileHandler
					add TAB into fileHandler
				ENDFOR
				add new line into fileHandler
				CLOSE Patient_Detail.txt
			ELSE
				PRINT("Patient Registered")
			ENDIF
		ENDDO
	ENDFUNCTION

---------------------------------------------------------------------------------------------

	FUNCTION searchTest(fileName,patientID)
		OPEN and READ fileName as fileHandler
		FOR EACH line IN fileHandler
			IF (patientID IN line) THEN
				PRINT(line)
				CLOSE fileHandler
				RETURN TRUE
			ENDIF
		ENDFOR
		CLOSE fileHandler
		RETURN FALSE
	ENDFUNCTION
	
	FUNCTION searchTest1(fileName1,fileName2,patientID)
		OPEN and READ fileName1 as fileHandler
		FOR EACH line IN fileHandler
			IF (patientID IN line) THEN
				PRINT(line)
				CLOSE fileHandler
				RETURN FALSE
			ENDIF
		ENDFOR
		CLOSE fileHandler
		
		OPEN and READ fileName2 as fileHandler
		FOR EACH line IN fileHandler
			IF (patientID IN line) THEN
				PRINT(line)
				CLOSE fileHandler
				RETURN FALSE
			ENDIF
		ENDFOR
		CLOSE fileHandler		
		RETURN TRUE
	ENDFUNCTION
	
	FUNCTION testResults()
		choice=0
		DOWHILE (choice not equal to 4)
	        PRINT('Select a test')
			PRINT('1. Test 1')
			PRINT('2. Test 2')
			PRINT('3. Test 3')
			PRINT('4. Exit')
			choice=READ('Enter selection: ')
			IF (choice is an integer) THEN
				IF (choice = 1) THEN
					Go to FUNCTION test1()
				ELSEIF (choice = 2) THEN
					Go to FUNCTION test2()
				ELSEIF (choice = 3) THEN
					Go to FUNCTION test3()
				ELSEIF (choice = 4) THEN 
					BREAK
				ELSE
					PRINT('Invalid input')
				ENDIF
			ELSE
				PRINT("Non-numeric value entered.")
			ENDIF
		ENDDO
	ENDFUNCTION
	
	FUNCTION test1()
		positive=[]
		negative=[]
		WHILE TRUE
			patient=[]
			testNumber='T1'
			patientID=READ("Enter Patient ID,(x) to exit:")in UPPER case 
			add patientID into patient
			IF (patientID='X') THEN
				BREAK
			ENDIF
			IF (searchTest1("Test1_negative.txt","Test1_positive.txt",patientID)) THEN
				IF (searchTest("Patient_Detail.txt",patientID)) THEN
					zone=READ("Zone(A/B/C/D):")in UPPER case
					add zone into patient
					IF (zone='A' or zone='B' or zone='C' or zone='D') THEN
						testResult=READ("Enter Test result,negative or positive:")in LOWER case
						add testNumber into patient
						add testResult into patient
						IF (testResult='negative') THEN
							group=READ("Group(ATO/ACC/AEO/SID/AHS): ") in UPPER case as STRING
							add group into patient
							IF (group='AHS') THEN
								actionTaken='CWFR'
								PRINT('Continue Working')
								PRINT("Pls come back for second test.")
							ELIF (group='SID') THEN
								actionTaken='HQFR'
								PRINT('Home Quarantine')
								PRINT("Pls come back for second test.")
							ELIF (group='ATO' or group='ACC' or group='AEO') THEN
								actionTaken='QDFR'
								PRINT('Quarantine in Designated Centres')
								PRINT("Pls come back for second test.")
							ELSE
								PRINT("Invalid group.")
								BREAK
							ENDIF
							add actionTaken into patient
							PRINT(patient)
							add patient into negative
							
							OPEN and APPEND Test1_negative.txt as fileHandler
							FOR EACH items IN negative
								FOR EACH item IN items
									add item into fileHandler
									add TAB into fileHandler
								ENDFOR
								add new line into fileHandler
							ENDFOR
							CLOSE Test1_negative.txt
							
						ELIF (testResult='positive') THEN
							positivePatientData=[]
							patientStatus='ACTIVE'
							group=READ("Group(ATO/ACC/AEO/SID/AHS): ") in UPPER case as STRING
							add group into patient
							
							OPEN and READ Patient_Status.txt as getID
							count=0
							FOR EACH line IN getID
								count=count+1
							ENDFOR
							count=count+1
							CLOSE Patient_Status.txt
							caseID="C"+zone+group+count
							READ caseID as STRING
							
							add caseID into positivePatientData
							add patientID into positivePatientData
							add zone into positivePatientData
							add group into positivePatientData
							add patientStatus into positivePatientData
							
							IF (group='AHS') THEN
								actionTaken='HQNF'
								place=''
								PRINT("Test Result is positive.")
								PRINT("Home Quarantine")
							ELIF (group='ATO' or group='ACC' or group='AEO'or group='SID') THEN
								actionTaken='QHNF'
								place=READ('WARD or ICU:')in UPPER case
								IF (place='WARD') THEN
									PRINT("Test Result is positive.")
									PRINT('Quarantine in Hospital Normal Ward.')
								ELIF (place='ICU') THEN
									PRINT("Test Result is positive.")
									PRINT('Quarantine in Hospital ICU.')
								ELSE
									PRINT("Invalid quarantine place.")
									BREAK
								ENDIF
							ELSE
								PRINT("Invalid group.")
								BREAK
							ENDIF
							add place into positivePatientData
							
							OPEN and APPEND Patient_Status.txt as fileHandler
							FOR EACH items IN positivePatientData
								add item into fileHandler
								add TAB into fileHandler
							ENDFOR
							add new line into fileHandler
							CLOSE Patient_Status.txt	
							
							add actionTaken into patient
							add place into patient
							PRINT(patient)
							add patient into positive
							
							OPEN and APPEND Test1_positive.txt as fileHandler
							FOR EACH items IN positive
								FOR EACH item IN items
									add item into fileHandler
									add TAB into fileHandler
								ENDFOR
								add new line into fileHandler
							ENDFOR
							CLOSE Test1_positive.txt						
						ELSE
							PRINT("Invalid test result.")
						ENDIF
					ELSE
						PRINT("Invalid zone")
					ENDIF
				ELSE
					PRINT("Patient not found.")
				ENDIF
			ELSE
				PRINT("Patient already done test1")
			ENDIF
			BREAK
		ENDWHILE
	ENDFUNCTION

	FUNCTION test2()
		positive=[]
		negative=[]
		WHILE TRUE
			patient=[]
			testNumber='T2'
			patientID=READ("Enter Patient ID,(x) to exit:")in UPPER case 
			add patientID into patient
			IF (patientID='X') THEN
				BREAK
			ENDIF
			IF (searchTest1("Test2_negative.txt","Test2_positive.txt",patientID)) THEN
				IF (searchTest("Test1_negative.txt",patientID)) THEN
					zone=READ("Zone(A/B/C/D):")in UPPER case
					add zone into patient
					IF (zone='A' or zone='B' or zone='C' or zone='D') THEN
						testResult=READ("Enter Test result,negative or positive:")in LOWER case
						add testNumber into patient
						add testResult into patient
						IF (testResult='negative') THEN
							group=READ("Group(ATO/ACC/AEO/SID/AHS): ") in UPPER case as STRING
							add group into patient
							IF (group='AHS') THEN
								actionTaken='CWFR'
								PRINT('Continue Working')
								PRINT("Pls come back for third test.")
							ELIF (group='SID') THEN
								actionTaken='HQFR'
								PRINT('Home Quarantine')
								PRINT("Pls come back for third test.")
							ELIF (group='ATO' or group='ACC' or group='AEO') THEN
								actionTaken='QDFR'
								PRINT('Quarantine in Designated Centres')
								PRINT("Pls come back for third test.")
							ELSE
								PRINT("Invalid group.")
								BREAK
							ENDIF
							add actionTaken into patient
							PRINT(patient)
							add patient into negative
							
							OPEN and APPEND Test2_negative.txt as fileHandler
							FOR EACH items IN negative
								FOR EACH item IN items
									add item into fileHandler
									add TAB into fileHandler
								ENDFOR
								add new line into fileHandler
							ENDFOR
							CLOSE Test2_negative.txt
							
						ELIF (testResult='positive') THEN
							positivePatientData=[]
							patientStatus='ACTIVE'
							group=READ("Group(ATO/ACC/AEO/SID/AHS): ") in UPPER case as STRING
							add group into patient
							
							OPEN and READ Patient_Status.txt as getID
							count=0
							FOR EACH line IN getID
								count=count+1
							ENDFOR
							count=count+1
							CLOSE Patient_Status.txt
							caseID="C"+zone+group+count
							READ caseID as STRING
							
							add caseID into positivePatientData
							add patientID into positivePatientData
							add zone into positivePatientData
							add group into positivePatientData
							add patientStatus into positivePatientData
							
							IF (group='AHS') THEN
								actionTaken='HQNF'
								place=''
								PRINT("Test Result is positive.")
								PRINT("Home Quarantine")
							ELIF (group='ATO' or group='ACC' or group='AEO'or group='SID') THEN
								actionTaken='QHNF'
								place=READ('WARD or ICU:')in UPPER case
								IF (place='WARD') THEN
									PRINT("Test Result is positive.")
									PRINT('Quarantine in Hospital Normal Ward.')
								ELIF (place='ICU') THEN
									PRINT("Test Result is positive.")
									PRINT('Quarantine in Hospital ICU.')
								ELSE
									PRINT("Invalid quarantine place.")
									BREAK
								ENDIF
							ELSE
								PRINT("Invalid group.")
								BREAK
							ENDIF
							add place into positivePatientData
							
							OPEN and APPEND Patient_Status.txt as fileHandler
							FOR EACH items IN positivePatientData
								add items into fileHandler
								add TAB into fileHandler
							ENDFOR
							add new line into fileHandler
							CLOSE Patient_Status.txt	
							
							add actionTaken into patient
							add place into patient
							PRINT(patient)
							add patient into positive
							
							OPEN and APPEND Test2_positive.txt as fileHandler
							FOR EACH items IN positive
								FOR EACH item IN items
									add item into fileHandler
									add TAB into fileHandler
								ENDFOR
								add new line into fileHandler
							ENDFOR
							CLOSE Test2_positive.txt						
						ELSE
							PRINT("Invalid test result.")
						ENDIF
					ELSE
						PRINT("Invalid zone")
					ENDIF
				ELSE
					PRINT('Pls completed test1 first.')
					PRINT('Positive patients did not need to run test2')
				ENDIF
			ELSE
				PRINT("Patient already done test2")
			ENDIF
			BREAK
		ENDWHILE
	ENDFUNCTION

	FUNCTION test3()
		positive=[]
		negative=[]
		WHILE TRUE
			patient=[]
			testNumber='T3'
			patientID=READ("Enter Patient ID,(x) to exit:")in UPPER case 
			add patientID into patient
			IF (patientID='X') THEN
				BREAK
			ENDIF
			IF (searchTest1("Test3_negative.txt","Test3_positive.txt",patientID)) THEN
				IF (searchTest("Test2_negative.txt",patientID)) THEN
					zone=READ("Zone(A/B/C/D):")in UPPER case
					add zone into patient
					IF (zone='A' or zone='B' or zone='C' or zone='D') THEN
						testResult=READ("Enter Test result,negative or positive:")in LOWER case
						add testNumber into patient
						add testResult into patient
						IF (testResult='negative') THEN
							group=READ("Group(ATO/ACC/AEO/SID/AHS): ") in UPPER case as STRING
							add group into patient
							IF (group='AHS') THEN
								actionTaken='CW'
								PRINT('Continue Working')
								PRINT("Congratulation!Your last test result is negative.")
							ELIF (group='ATO' or group='ACC' or group='AEO' or group='SID') THEN
								actionTaken='RU'
								PRINT('Allow to reunion with family.')
								PRINT("Congratulation!Your last test result is negative.")
							ELSE
								PRINT("Invalid group.")
								BREAK
							ENDIF
							add actionTaken into patient
							PRINT(patient)
							add patient into negative
							
							OPEN and APPEND Test3_negative.txt as fileHandler
							FOR EACH items IN negative
								FOR EACH item IN items
									add item into fileHandler
									add TAB into fileHandler
								ENDFOR
								add new line into fileHandler
							ENDFOR
							CLOSE Test3_negative.txt
							
						ELIF (testResult='positive') THEN
							positivePatientData=[]
							patientStatus='ACTIVE'
							group=READ("Group(ATO/ACC/AEO/SID/AHS): ") in UPPER case as STRING
							add group into patient
							
							OPEN and READ Patient_Status.txt as getID
							count=0
							FOR EACH line IN getID
								count=count+1
							ENDFOR
							count=count+1
							CLOSE Patient_Status.txt
							caseID="C"+zone+group+count
							READ caseID as STRING
							
							add caseID into positivePatientData
							add patientID into positivePatientData
							add zone into positivePatientData
							add group into positivePatientData
							add patientStatus into positivePatientData
							
							IF (group='AHS') THEN
								actionTaken='HQNF'
								place=''
								PRINT("Test Result is positive.")
								PRINT("Home Quarantine")
							ELIF (group='ATO' or group='ACC' or group='AEO'or group='SID') THEN
								actionTaken='QHNF'
								place=READ('WARD or ICU:')in UPPER case
								IF (place='WARD') THEN
									PRINT("Test Result is positive.")
									PRINT('Quarantine in Hospital Normal Ward.')
								ELIF (place='ICU') THEN
									PRINT("Test Result is positive.")
									PRINT('Quarantine in Hospital ICU.')
								ELSE
									PRINT("Invalid quarantine place.")
									BREAK
								ENDIF
							ELSE
								PRINT("Invalid group.")
								BREAK
							ENDIF
							add place into positivePatientData
							
							OPEN and APPEND Patient_Status.txt as fileHandler
							FOR EACH items IN positivePatientData
								add item into fileHandler
								add TAB into fileHandler
							ENDFOR
							add new line into fileHandler
							CLOSE Patient_Status.txt	
							
							add actionTaken into patient
							add place into patient
							PRINT(patient)
							add patient into positive
							
							OPEN and APPEND Test3_positive.txt as fileHandler
							FOR EACH items IN positive
								FOR EACH item IN items
									add item into fileHandler
									add TAB into fileHandler
								ENDFOR
								add new line into fileHandler
							ENDFOR
							CLOSE Test3_positive.txt						
						ELSE
							PRINT("Invalid test result.")
						ENDIF
					ELSE
						PRINT("Invalid zone")
					ENDIF
				ELSE
					PRINT('Pls completed test2 first.')
					PRINT('Positive patients did not need to run test3')
				ENDIF
			ELSE
				PRINT("Patient already done test3")
			ENDIF
			BREAK
		ENDWHILE
	ENDFUNCTION
	
---------------------------------------------------------------------------------------------

	FUNCTION modifyPatientStatus()
		OPEN and READ Patient_Status.txt as fileHandler
		caseID=READ("Enter Patient's Case ID,(x) to exit: ") in UPPER case
		fileData=READLINES(fileHandler)
		FOR EACH index,line IN ENUMERATE(fileData)
			IF (caseID IN line) THEN
				PRINT(line)
				patientStatus=READ("Patient Status(ACTIVE/RECOVERED/DECEASED):") in UPPER case
				REPLACE "ACTIVE" in line with patientStatus
				fileData[index]=line
				PRINT(line)
			ENDIF
		ENDFOR
		CLOSE Patient_Status.txt
		
		OPEN and WRITE Patient_Status.txt as file
		FOR EACH line IN fileData
			add line into file
		ENDFOR
		CLOSE Patient_Status.txt
	ENDFUNCTION

---------------------------------------------------------------------------------------------	

	FUNCTION testCarriedOut()
	    count1=0
		count2=0
		count3=0
		OPEN and READ Test1_negative.txt as fileHandler
		FOR EACH items IN fileHandler
			count1=count1+1
		ENDFOR
		CLOSE Test1_negative.txt
		
		OPEN and READ Test1_positive.txt as fileHandler
		FOR EACH items IN fileHandler
			count1=count1+1
		ENDFOR
		CLOSE Test1_positive.txt
		
		OPEN and READ Test2_negative.txt as fileHandler
		FOR EACH items IN fileHandler
			count2=count2+1
		ENDFOR
		CLOSE Test2_negative.txt
		
		OPEN and READ Test2_positive.txt as fileHandler
		FOR EACH items IN fileHandler
			count2=count2+1
		ENDFOR
		CLOSE Test2_positive.txt
		
		OPEN and READ Test3_negative.txt as fileHandler
		FOR EACH items IN fileHandler
			count3=count3+1
		ENDFOR
		CLOSE Test3_negative.txt
		
		OPEN and READ Test3_positive.txt as fileHandler
		FOR EACH items IN fileHandler
			count3=count3+1
		ENDFOR
		CLOSE Test3_positive.txt
		
		PRINT("Total number of Test1 carried out is",count1)
		PRINT("Total number of Test2 carried out is",count2)
		PRINT("Total number of Test3 carried out is",count3)
	ENDFUNCTION
	
	FUNCTION patientsTested()
		count=0
		OPEN and READ Test1_negative.txt as fileHandler
		FOR EACH items IN fileHandler
			count=count+1
		ENDFOR
		CLOSE Test1_negative.txt
		
		OPEN and READ Test1_positive.txt as fileHandler
		FOR EACH items IN fileHandler
			count=count+1
		ENDFOR
		CLOSE Test1_positive.txt
		PRINT("Total number of patients tested is",count)
	ENDFUNCTION

	FUNCTION recoveredCases()
		count=0
		status="RECOVERED"
		OPEN and READ Patient_Status.txt as fileHandler
		FOR EACH items IN fileHandler
			IF (status IN items) THEN
				count=count+1
			ENDIF
		ENDFOR
		CLOSE Patient_Status.txt
		PRINT("Total number of recovered cases is",count)
	ENDFUNCTION
	
	FUNCTION positiveGroup()
		count1=0
		count2=0
		count3=0
		count4=0
		count5=0
		OPEN and READ Test1_positive.txt as fileHandler
		FOR EACH item IN fileHandler
			IF (item[1to4]='ATO') THEN
				count1=count1+1
			ELSEIF (item[1to4]='ACC') THEN
				count2=count2+1
			ELSEIF (item[1to4]='AEO') THEN
				count3=count3+1
			ELSEIF (item[1to4]='SID') THEN
				count4=count4+1
			ELSEIF (item[1to4]='AHS') THEN
				count5=count5+1
			ENDIF
		ENDFOR
		CLOSE Test1_positive.txt
		
		OPEN and READ Test2_positive.txt as fileHandler
		FOR EACH item IN fileHandler
			IF item[1to4]='ATO' THEN
				count1=count1+1
			ELSEIF item[1to4]='ACC' THEN
				count2=count2+1
			ELSEIF item[1to4]='AEO' THEN
				count3=count3+1
			ELSEIF item[1to4]='SID' THEN
				count4=count4+1
			ELSEIF item[1to4]='AHS' THEN
				count5=count5+1
			ENDIF
		ENDFOR
		CLOSE Test2_positive.txt
		
		OPEN and READ Test3_positive.txt as fileHandler
		FOR EACH item IN fileHandler
			IF (item[1to4]='ATO') THEN
				count1=count1+1
			ELSEIF (item[1to4]='ACC') THEN
				count2=count2+1
			ELSEIF (item[1to4]='AEO') THEN
				count3=count3+1
			ELSEIF (item[1to4]='SID') THEN
				count4=count4+1
			ELSEIF (item[1to4]='AHS') THEN
				count5=count5+1
			ENDIF
		ENDFOR
		CLOSE Test3_positive.txt
		PRINT("Total number of positive patients in ATO",count1)
		PRINT("Total number of positive patients in ACC",count2)
		PRINT("Total number of positive patients in AEO",count3)
		PRINT("Total number of positive patients in SID",count4)
		PRINT("Total number of positive patients in AHS",count5)	
	ENDFUNCTION
	
	FUNCTION positiveZone()
		count1=0
		count2=0
		count3=0
		count4=0
		OPEN AND READ Test1_positive.txt as fileHandler
		FOR EACH item IN fileHandler
			IF (item[0]='A') THEN
				count1=count1+1
			ELSEIF (item[0]='B') THEN
				count2=count2+1
			ELSEIF (item[0]='C') THEN
				count3=count3+1
			ELSEIF (item[0]='D') THEN
				count4=count4+1
			ENDIF
		ENDFOR
		CLOSE Test1_positive.txt
		
		OPEN AND READ Test2_positive.txt as fileHandler
		FOR EACH item IN fileHandler
			IF (item[0]='A') THEN
				count1=count1+1
			ELSEIF (item[0]='B') THEN
				count2=count2+1
			ELSEIF (item[0]='C') THEN
				count3=count3+1
			ELSEIF (item[0]='D') THEN
				count4=count4+1
			ENDIF
		ENDFOR
		CLOSE Test2_positive.txt
		
		OPEN AND READ Test3_positive.txt as fileHandler
		FOR EACH item IN fileHandler
			IF (item[0]='A') THEN
				count1=count1+1
			ELSEIF (item[0]='B') THEN
				count2=count2+1
			ELSEIF (item[0]='C') THEN
				count3=count3+1
			ELSEIF (item[0]='D') THEN
				count4=count4+1
			ENDIF
		ENDFOR
		CLOSE Test3_positive.txt
		PRINT("Total number of positive patients in Zone A",count1)
		PRINT("Total number of positive patients in Zone B",count2)
		PRINT("Total number of positive patients in Zone C",count3)
		PRINT("Total number of positive patients in Zone D",count4)		
	ENDFUNCTION

	FUNCTION statisticalInformation()
		choice=0
		WHILE choice not equal to 6
			PRINT("Total number of")
			PRINT("1. Test Carried Out")
			PRINT("2. Patients tested")
			PRINT("3. Recovered cases")
			PRINT("4. Patient Test Positive for COVID-19 group wise")
			PRINT("5. Active cases zone wise")
			PRINT("6. Exit")
			PRINT("Enter selection: ")
			READ choice
			IF (choice is an integer) THEN
				IF (choice=1) THEN
					testCarriedOut()
				ELSEIF (choice=2) THEN
					patientsTested()
				ELSEIF (choice=3) THEN
					recoveredCases()
				ELSEIF (choice=4) THEN
					positiveGroup()
				ELSEIF (choice=5) THEN
					positiveZone()
				ELSEIF (choice=6) THEN 
					BREAK
				ELSE
					PRINT('Invalid input.')
				ENDIF
			ELSE
				PRINT("Non-numeric value entered.")
			ENDIF
		ENDWHILE
	ENDFUNCTION 
	
---------------------------------------------------------------------------------------------------

	FUNCTION searchPatientRecord()
		OPEN and READ Patient_Detail.txt as fileHandler
		search_key = READ('Enter patient ID or name: ') as UPPER case
	    FOR EACH line IN fileHandler
			IF (search_key IN line) THEN
				PRINT(line)
				RETURN
			ENDIF
		ENDFOR
		CLOSE Patient_Detail.txt
	ENDFUNCTION

	FUNCTION searchCaseStatus()
		OPEN and READ Patient_Status.txt as fileHandler
		search_key = READ('Enter case ID: ') as UPPER case
	    FOR EACH line IN fileHandler
			IF (search_key IN line) THEN
				PRINT(line)
				RETURN
			ENDIF
		ENDFOR
		CLOSE Patient_Status.txt
	ENDFUNCTION
	
	FUNCTION deceasedPatient()
		OPEN and READ Patient_Status.txt as fileHandler
		search_key = 'DECEASED' 
		FOR EACH line IN fileHandler
			IF (search_key IN line) THEN
				PRINT(line)
			ENDIF
		ENDFOR
		CLOSE Patient_Status.txt
	ENDFUNCTION
	
	FUNCTION searchPatientData()
		choice=0
		WHILE choice not equal to 4
			PRINT("1. Patient Record")
			PRINT("2. Status of Case")
			PRINT("3. Patient Record of all Decreased Patients")
			PRINT("4. Exit")
			PRINT("Enter selection: ")
			READ choice
			IF (choice is an integer) THEN
				IF (choice = 1) THEN
					Go to FUNCTION searhPatientRecord()
				ELSEIF (choice = 2) THEN
					Go to FUNCTION searchCaseStatus()
				ELSEIF (choice = 3) THEN
					Go to FUNCTION deceasedPatient()
				ELSEIF (choice = 4) THEN
					BREAK
				ELSE
					PRINT('Invalid input')
				ENDIF
			ELSE
				PRINT("Non-numeric value entered.")	\
			ENDIF
		ENDWHILE
	ENDFUNCTION 
	
---------------------------------------------------------------------------------------------------	

	FUNCTION createFile()
		OPEN and CLOSE Patient_Detail.txt
		OPEN and CLOSE Test1_negative.txt
		OPEN and CLOSE Test1_positive.txt
		OPEN and CLOSE Test2_negative.txt
		OPEN and CLOSE Test2_positive.txt
		OPEN and CLOSE Test3_negative.txt
		OPEN and CLOSE Test3_positive.txt
		OPEN and CLOSE Patient_Status.txt
	ENDFUNCTION
	
	FUNCTION MENU()
		choice=0
		WHILE choice not equal to 6
			PRINT('----------COVID-19 Patient Management System----------')
			PRINT("Select the operation that you want to perform.")
			PRINT("1. New Patient Registration")
			PRINT("2. Test Result and Action Taken")
			PRINT("3. Changing Patient Status")
			PRINT("4. Statistical Information on Tests Carried Out")
			PRINT("5. Searching Functionalities")
			PRINT("6. Exit")
			choice = READ("Enter selection: ")
			createFile()
			IF (choice is an integer) THEN
				IF (choice = 1) THEN
					Go to FUNCTION patientRegistration()
				ELSEIF (choice = 2) THEN
					Go to FUNCTION testResults()
				ELSEIF (choice = 3) THEN
					Go to FUNCTION modifyPatientStatus()
				ELSEIF (choice = 4) THEN
					Go to FUNCTION statisticalInformation()
				ELSEIF (choice = 5) THEN
					Go to FUNCTION searchPatientData()
				ELSEIF (choice = 6) THEN 
					BREAK
				ELSE
					PRINT('Invalid input')
				ENDIF
			ELSE
				PRINT("Non-numeric value entered.")		
			ENDIF
		ENDWHILE
	ENDFUNCTION
	
	MENU()
	
END
